{
    
    #Style sheet to use
    style: Synadia_style.json,
    
    #Override any properties from style sheet
    styleoverride: {
        laneWidthRel: [ 1.0, 1.0, 1.0, 1.0 ],
        borderbottom: 45,
        
       
    },
    
    #Page header and footer text
    "pageHeader": "Value Proposition",
    "pageFooter": "**Created by Synadia, the team behind NATS - www.synadia.com**   https://github.com/roeschter/cheat-sheet-nats-synadia",
    
    #Insert images into lanes
    images: [
        {
            #Optional image title
            "title": "", 
            "image": "synadia_ai_workflow_at_the_edge_2.png",
            #First lane to use
            "startlane": 1, 
            #The image may span more than one lane
            "lanes": 2,
            #Place at top or bottom
            "position": "bottom",
            #Padding
            "pad.top": 0,
            "pad.bottom": 15,
            "pad.left": 0,
            "pad.right": 0,
        }
    ],
    "blocks": [
        {
            #Some properties operate at block level and can be nested
            #bullets
            #exclude
            
            #exclude content - -1 removes the whole block
            "exclude": [-1],
            
            #exclude content - or a list of items to exclude - starting with 0
            #"exclude": [0,2,3],
            
            #Items should have bullets
            bullets: true,
            
            "title": "**Formatting examples**",
            #For Formatting we use a markdown subset
            "items": [
                "*Cursive* \\*Cursive\\* ",  
                "**Bold** \\*\\*Bold\\*\\*",  
                "***Cursive Bold*** \\*\\*\\*Cursive Bold\\*\\*\\*", 
                #We can nest blocks with indentation
                {
                    #We can override bullets at any level
                    bullets: false,
                    #Exclude first item
                    "exclude": [0],
                    "items": [
                        "Hidden",
                        "``Use Fixed width e.g. Courier font``  \\`\\`Fixed width\\`\\`",
                        #Only markdown formatting characters (* `)need extra escaping 
                        "Escape characters like \\* \\` \\",             
                    ]
                }
            ]    
        },
        {
            #exclude content - List of items to remove
            "exclude": [4],
            "title": "**Server (NATS Server or NATS Core)**",
            "items": [
                "**Single executable** that manages message routing between clients.",
                "**Self clustering**, no zookeeper etc.",
                "Written in **Go** for simplicity, performance and scalability.",
                "Supports **publish/subscribe, requests/reply and point-to-point (queueing) messaging patterns.**",
                "**Filtered should not be visible**",
            ]    
        },
        {
            "title": "**Client/Server architecture**",
            "items": [
                "Applications use NATS client libraries to connect to the server.",
                "Can **publish messages, subscribe to subjects**, or **both**.",
                "Supports multiple programming languages, including Go, Java, Python and JavaScript."
            ]
        },
        {
            "title": "**Subject addressing**",
            "items": [
                "Subjects are topic/channels for message exchange.",
                "Support **hierarchical namespaces** and **wildcard subscriptions** for flexible message routing."
            ]
        },
        {
            "title": "**Message**",
            "items": [
                "Unit of data transmission. Everything is a message in NATS.",
                "Composed of:",
                {
                
                    "items": [                        
                        "**Subject:** The channel to which the message is published.",
                        "**Payload:** The binary content of the message.",
                        "**Headers:** Map with metadata.",
                        "**Reply-Subject:** Reply channel for RPC style communication"                    
                    ]
                }
            ]
        },
        {
            "title": "**Queue Groups**",
            "items": [
                "Used for **load balancing** among multiple subscribers.",
                "**Each message is delivered to only one subscriber** in the queue group."
            ]
        },
        {
            "title": "**JetStream (Persistence)**",
            "items": [
                "**Built-in persistence layer in NATS**. Replicated and resilient.",
                "Adds advanced capabilities like:",
                {
                    "items": [
                        "**Streaming:** Store and replay messages.",
                        "**Queues:** Manages message delivery to multiple consumers.",
                        "**Delivery Guarantees:** Supports at least once and exactly-once delivery.",
                        "**Flow Control:** Decouples message production and consumption.",
                        "**Key/Value Store:** Provides a simple distributed key/value storage system.",
                        "**Per message Acks:** Ensures message processing and redelivery."
                    ]
                }
            ]
        }, 
        {
            "title": "**Consistent Replication**",
            "items": [
                "**Clustered NATS servers** replicate messages for **high availability**.",
                "JetStream enables **persistent storage with fault tolerance.**"
            ]
        },
        {
            "title": "**Wildcard Subscriptions**",
            "items": [
                "**Single-level (\\*):** Matches one token in the subject hierarchy.",
                "**Multi-level (>):** Matches one or more tokens at the end of the subject hierarchy.",
                "Used for **subscription, filtering, security, and transformation.**"
            ]
        },
       
        {
            "title": "**Key Features**",
            "items": [
                "**Lightweight:** Minimal resource consumption, ideal for microservices and edge computing.",
                "**Low Latency:** Optimized for high performance low-latency messaging.",
                "**Persistence:** JetStream enables reliable message storage and delivery.",
                "**Scalability:** Supports horizontal scaling via clustering for high availability.",
                "**Security:** Offers **TLS encryption, token-based authentication** and **subject based permissions.**"
            ]
        },
        {
            "title": "**Use Cases**",
            "items": [
                "**Microservices:** Communication: Lightweight and fast inter-service messaging.",
                "**IoT and Edge Computing:** Low latency messaging for distributed Systems.",
                "**Real-time Analytics:** Stream processing and event-driven architectures.",
                "**Event Streaming:** Reliable message delivery with JetStream.",
                "**Financial Services:** High-Performance messaging for real-time trading systems."
            ]
        },
        {
            "title": "**A Brief History of NATS**",
            "items": [
                "**2010:** Created by Derek Collison as a lightweight messaging system for Cloud Foundry.",
                "**2012:** Open-sourced under the Apache 2.0 license.",
                "**2017:** Founded Synadia to drive enterprise support, and a long-term roadmap. Synadia also manages the nats.io ecosystem, including the client libraries and NATS Connect.",
                "**2021:** Introduction of NATS JetStream for message persistence and streaming.",
                "**2025 and Beyond:** Continued adoption in edge computing, IoT, and microservices. Architectures, with ongoing enhancements to JetStream and clustering capabilities.",
                "**Open-Source Community** â€” NATS is developed openly under the **nats-io organization** on GitHub, with contributions from companies like **Siemens, VMware, and Cisco**, as well as independent developers worldwide.",
                "**Widespread Deployment:** NATS is trusted by leading enterprises and platforms, including Mastercard, VMware, Cloud Foundry, Siemens, Schaeffler, Walmart, Alibaba and GE.",
            ]
        },
        {
            "title": "**NATS Governance**",
            "exclude": [-1],
            "items": [
                "**Synadia** - Founded by **Derek Collison**, who is the primary maintainer of NATS, driving core development, enterprise support, and the long-term roadmap. Synadia also manages the nats.io ecosystem, including the client libraries and NATS Connect.",
                "**Cloud Native Computing Foundation (CNCF)** - As a **CNCF incubating Project**, NATS benefits from CNCF governance, security audits, and community-driven collaboration, ensuring neutrality and long-term sustainability."
            ]
        }
    ]
}
